/* The following code was generated by JFlex 1.4.3 on 3/5/15 9:52 PM */

package ua.t3hnar.plugins.cmdsupport.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/5/15 9:52 PM from the specification file
 * <tt>src/ua/t3hnar/plugins/cmdsupport/lang/lexer/Cmd.flex</tt>
 */
final class JCmdLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ECHO = 6;
  public static final int GOTO = 14;
  public static final int CALL = 4;
  public static final int IF_DIGIT = 20;
  public static final int IF_EQUAL = 24;
  public static final int REM = 26;
  public static final int SET_VALUE = 30;
  public static final int ECHO_SYM = 8;
  public static final int IF = 16;
  public static final int IF_VARIABLE = 22;
  public static final int IF_EXIST = 18;
  public static final int SET = 28;
  public static final int FOR_IN = 12;
  public static final int NEXT_SYM = 2;
  public static final int COMMAND = 32;
  public static final int FOR = 10;
  public static final int YYINITIAL = 0;
  public static final int LABEL = 34;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\3\1\4\1\10\1\2\22\0\1\1\1\0\1\5"+
    "\3\0\1\12\1\0\1\41\1\42\2\0\1\7\2\0\1\35\12\46"+
    "\1\17\1\7\1\13\1\45\1\14\1\36\1\16\1\21\1\0\1\20"+
    "\1\40\1\26\1\30\1\23\1\27\1\32\2\0\1\22\1\34\1\37"+
    "\1\24\2\0\1\31\1\33\1\25\1\0\1\44\1\0\1\43\3\0"+
    "\1\6\1\0\1\15\2\0\1\21\1\0\1\20\1\40\1\26\1\30"+
    "\1\23\1\27\1\32\2\0\1\22\1\34\1\37\1\24\2\0\1\31"+
    "\1\33\1\25\1\0\1\44\1\0\1\43\3\0\1\11\10\0\1\4"+
    "\u05da\0\12\46\206\0\12\46\306\0\12\46\u019c\0\12\46\166\0\12\46"+
    "\166\0\12\46\166\0\12\46\166\0\12\46\166\0\12\46\166\0\12\46"+
    "\166\0\12\46\166\0\12\46\340\0\12\46\166\0\12\46\106\0\12\46"+
    "\u0116\0\12\46\106\0\12\46\u0746\0\12\46\46\0\12\46\u012c\0\12\46"+
    "\200\0\12\46\246\0\12\46\6\0\12\46\266\0\12\46\126\0\12\46"+
    "\206\0\12\46\6\0\12\46\u03ce\0\2\4\u85f6\0\12\46\u02a6\0\12\46"+
    "\46\0\12\46\306\0\12\46\166\0\12\46\u0196\0\12\46\u5316\0\12\46"+
    "\346\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\22\0\1\1\3\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\2\1\1\10\1\11\1\1\1\12\4\13\1\1"+
    "\1\14\1\15\1\2\1\14\1\16\1\14\1\16\1\17"+
    "\1\20\1\2\4\17\1\21\1\22\1\23\2\22\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\2\2\32\1\30"+
    "\1\33\1\34\6\33\1\13\1\35\1\2\1\13\1\36"+
    "\1\13\1\37\1\40\1\41\1\42\1\43\1\44\1\13"+
    "\1\45\1\46\1\47\1\50\1\2\1\47\1\51\1\52"+
    "\1\53\1\52\1\54\1\55\1\2\12\54\1\56\1\57"+
    "\1\60\1\56\1\61\1\0\1\1\1\62\1\63\1\6"+
    "\1\7\1\64\1\65\1\0\1\1\1\13\1\0\1\66"+
    "\2\14\1\67\1\0\2\17\1\70\1\71\1\72\1\73"+
    "\1\0\1\74\6\0\1\75\1\0\1\76\1\13\2\77"+
    "\1\100\1\13\2\0\1\101\1\102\2\0\1\103\2\0"+
    "\1\104\7\54\1\105\1\54\1\100\1\0\1\106\1\0"+
    "\1\66\1\0\1\66\1\0\1\107\1\74\3\0\1\110"+
    "\1\0\1\76\1\0\1\76\1\100\1\101\1\102\1\103"+
    "\1\104\1\0\1\104\4\54\1\111\1\61\1\112\1\100"+
    "\1\106\1\66\1\17\4\0\1\76\1\104\1\113\1\114"+
    "\1\115\1\116\2\0\1\117\6\0\1\120\5\0\1\121"+
    "\2\0\1\122";

  private static int [] zzUnpackAction() {
    int [] result = new int[240];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\234\0\303\0\352\0\u0111"+
    "\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4\0\u01fb\0\u0222\0\u0249"+
    "\0\u0270\0\u0297\0\u02be\0\u02e5\0\u030c\0\u0333\0\u035a\0\u0381"+
    "\0\u03a8\0\u03cf\0\u03f6\0\u041d\0\u0444\0\u046b\0\u0492\0\u04b9"+
    "\0\u04e0\0\u0381\0\u0507\0\u052e\0\u0555\0\u057c\0\u05a3\0\u05ca"+
    "\0\u05f1\0\u0618\0\u063f\0\u0381\0\u0666\0\u068d\0\u06b4\0\u06db"+
    "\0\u0702\0\u0729\0\u0381\0\u0750\0\u0777\0\u079e\0\u0381\0\u07c5"+
    "\0\u07ec\0\u0813\0\u0381\0\u083a\0\u0381\0\u0381\0\u0861\0\u0888"+
    "\0\u08af\0\u0381\0\u0861\0\u08d6\0\u0381\0\u08fd\0\u0924\0\u094b"+
    "\0\u0972\0\u0999\0\u09c0\0\u09e7\0\u0a0e\0\u0a35\0\u0a5c\0\u0a83"+
    "\0\u0381\0\u0aaa\0\u0381\0\u0ad1\0\u0af8\0\u0381\0\u0b1f\0\u0b46"+
    "\0\u0b6d\0\u0381\0\u0381\0\u0b94\0\u0bbb\0\u0be2\0\u0381\0\u0c09"+
    "\0\u0381\0\u0c30\0\u0c57\0\u0c7e\0\u0ca5\0\u0ccc\0\u0cf3\0\u0381"+
    "\0\u0d1a\0\u0d41\0\u0d68\0\u0d8f\0\u0db6\0\u0ddd\0\u0e04\0\u0e2b"+
    "\0\u0e52\0\u0e79\0\u0ea0\0\u0ec7\0\u0381\0\u0eee\0\u0f15\0\u0381"+
    "\0\u0381\0\u0381\0\u0381\0\u0381\0\u046b\0\u0f3c\0\u0f63\0\u0381"+
    "\0\u0f8a\0\u05ca\0\u0fb1\0\u0381\0\u068d\0\u0fd8\0\u0fff\0\u1026"+
    "\0\u06b4\0\u0381\0\u0381\0\u0861\0\u0924\0\u0381\0\u104d\0\u1074"+
    "\0\u109b\0\u10c2\0\u10e9\0\u1110\0\u0381\0\u1137\0\u0a0e\0\u115e"+
    "\0\u0a0e\0\u0381\0\u0a0e\0\u1185\0\u0b94\0\u11ac\0\u0b94\0\u11d3"+
    "\0\u11fa\0\u0c57\0\u0381\0\u1221\0\u1248\0\u0c7e\0\u126f\0\u1296"+
    "\0\u12bd\0\u12e4\0\u130b\0\u1332\0\u1359\0\u0c7e\0\u1380\0\u0381"+
    "\0\u13a7\0\u0381\0\u13ce\0\u0381\0\u13f5\0\u063f\0\u141c\0\u06b4"+
    "\0\u0924\0\u1443\0\u146a\0\u1491\0\u0381\0\u14b8\0\u0381\0\u14df"+
    "\0\u0a83\0\u0b6d\0\u0381\0\u1506\0\u0c57\0\u0381\0\u152d\0\u0cf3"+
    "\0\u1554\0\u157b\0\u15a2\0\u15c9\0\u0c7e\0\u0c7e\0\u0c7e\0\u0eee"+
    "\0\u0f3c\0\u0f8a\0\u0fd8\0\u15f0\0\u1617\0\u163e\0\u1665\0\u1137"+
    "\0\u1248\0\u0c7e\0\u0c7e\0\u0c7e\0\u0c7e\0\u168c\0\u16b3\0\u0381"+
    "\0\u16da\0\u1701\0\u1728\0\u174f\0\u1776\0\u179d\0\u0381\0\u17c4"+
    "\0\u17eb\0\u1812\0\u1839\0\u1860\0\u0381\0\u1887\0\u18ae\0\u0381";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[240];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\23\1\24\2\25\1\26\1\27\1\23\1\30\1\25"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\30\23"+
    "\1\40\2\25\1\26\1\41\1\23\1\42\1\25\1\43"+
    "\1\44\1\45\1\46\1\47\1\23\1\42\27\23\1\50"+
    "\1\51\2\25\1\52\1\53\1\50\1\54\1\25\1\43"+
    "\1\44\1\45\1\46\1\55\1\50\1\56\27\50\1\57"+
    "\1\60\2\25\1\61\1\62\1\57\1\63\1\25\1\43"+
    "\1\44\1\45\1\46\1\64\1\57\1\63\4\57\1\65"+
    "\23\57\1\66\2\25\1\61\1\62\1\57\1\63\1\25"+
    "\1\43\1\44\1\45\1\46\1\64\1\57\1\63\27\57"+
    "\1\67\1\70\3\25\3\67\1\25\21\67\1\71\5\67"+
    "\1\72\6\67\1\73\1\74\3\25\3\73\1\25\30\73"+
    "\1\75\1\76\4\73\1\77\1\100\2\25\1\101\2\77"+
    "\1\102\1\25\1\43\1\44\1\45\1\46\2\77\1\103"+
    "\15\77\1\104\11\77\1\105\1\106\3\25\1\107\2\105"+
    "\1\25\7\105\1\110\5\105\1\111\10\105\1\112\1\113"+
    "\4\105\1\114\1\105\1\115\1\116\2\25\1\117\1\120"+
    "\1\115\1\121\1\25\4\121\1\122\1\115\1\121\27\115"+
    "\1\123\1\124\3\25\3\123\1\25\35\123\1\125\1\126"+
    "\1\127\3\25\3\126\1\25\36\126\1\115\1\130\2\25"+
    "\1\117\1\131\1\115\1\132\1\25\4\132\2\115\1\132"+
    "\27\115\2\133\3\25\3\133\1\25\36\133\1\134\1\135"+
    "\2\25\1\136\2\134\1\137\1\25\4\137\2\134\1\137"+
    "\25\134\1\140\1\134\1\141\1\142\3\25\1\143\2\141"+
    "\1\25\36\141\1\144\1\145\2\25\1\146\1\147\1\144"+
    "\1\150\1\25\1\43\1\44\1\45\1\46\1\151\1\144"+
    "\1\150\1\152\2\144\1\153\2\144\1\154\1\144\1\155"+
    "\1\156\1\157\1\160\13\144\1\161\1\162\2\163\1\164"+
    "\2\161\1\165\1\163\4\165\2\161\1\165\27\161\1\23"+
    "\3\0\3\23\6\0\2\23\1\0\27\23\1\0\1\24"+
    "\47\0\3\25\3\0\1\25\36\0\1\23\1\0\2\25"+
    "\1\26\2\23\1\0\1\25\4\0\2\23\1\0\27\23"+
    "\1\27\1\166\2\0\1\27\1\23\1\167\6\166\2\27"+
    "\1\166\27\27\60\0\1\170\47\0\1\171\47\0\1\172"+
    "\47\0\1\173\32\0\1\23\2\174\1\0\3\23\6\174"+
    "\2\23\1\174\27\23\1\175\3\0\3\175\6\0\2\175"+
    "\1\0\27\175\17\0\1\165\30\0\1\40\45\0\1\41"+
    "\1\176\2\0\1\41\1\23\1\177\6\176\2\41\1\176"+
    "\27\41\11\0\1\200\47\0\1\200\47\0\1\200\47\0"+
    "\1\200\32\0\1\23\2\42\1\0\3\23\6\42\2\23"+
    "\1\42\27\23\1\50\3\0\3\50\6\0\2\50\1\0"+
    "\27\50\1\0\1\51\45\0\1\50\1\0\2\25\1\52"+
    "\2\50\1\0\1\25\4\0\2\50\1\0\27\50\1\53"+
    "\1\201\2\0\1\53\1\202\1\203\6\201\2\53\1\201"+
    "\27\53\1\50\2\204\1\0\3\50\6\204\2\50\1\204"+
    "\27\50\1\205\3\0\3\205\6\0\2\205\1\0\27\205"+
    "\1\57\3\0\3\57\6\0\2\57\1\0\27\57\1\0"+
    "\1\60\45\0\1\57\1\0\2\25\1\61\2\57\1\0"+
    "\1\25\4\0\2\57\1\0\27\57\1\62\1\206\2\0"+
    "\1\62\1\57\1\207\6\206\2\62\1\206\27\62\1\57"+
    "\2\63\1\0\3\57\6\63\2\57\1\63\30\57\3\0"+
    "\3\57\6\0\2\57\1\0\10\57\1\210\6\57\1\211"+
    "\7\57\1\0\1\66\46\0\1\70\104\0\1\212\33\0"+
    "\1\213\23\0\1\74\45\0\1\77\3\0\3\77\6\0"+
    "\2\77\1\0\27\77\1\0\1\100\45\0\1\77\1\0"+
    "\2\25\1\101\2\77\1\0\1\25\4\0\2\77\1\0"+
    "\30\77\3\0\3\77\6\0\2\77\1\0\16\77\1\214"+
    "\10\77\1\0\1\106\45\0\2\215\2\0\1\215\1\216"+
    "\1\217\40\215\34\0\1\220\43\0\1\221\11\0\1\222"+
    "\27\0\1\223\50\0\1\224\65\0\1\225\1\0\1\115"+
    "\3\0\3\115\6\0\2\115\1\0\27\115\1\0\1\116"+
    "\45\0\1\115\1\0\2\25\1\117\2\115\1\0\1\25"+
    "\4\0\2\115\1\0\27\115\1\120\1\226\2\0\1\120"+
    "\1\227\1\230\6\226\2\120\1\226\27\120\1\231\2\232"+
    "\1\0\3\231\6\232\2\231\1\232\27\231\1\0\1\124"+
    "\113\0\1\125\1\0\1\127\46\0\1\130\45\0\1\131"+
    "\1\166\2\0\1\131\1\233\1\234\6\166\2\131\1\166"+
    "\27\131\1\235\1\236\2\0\3\235\6\0\2\235\1\0"+
    "\25\235\1\237\1\235\1\0\1\135\45\0\1\235\1\236"+
    "\2\25\1\136\2\235\1\0\1\25\4\0\2\235\1\0"+
    "\25\235\1\237\1\235\1\240\1\241\2\0\3\240\6\0"+
    "\2\240\1\0\27\240\1\0\1\142\45\0\2\242\2\0"+
    "\1\242\1\243\1\244\40\242\1\144\3\0\3\144\6\0"+
    "\2\144\1\0\27\144\1\0\1\145\45\0\1\144\1\0"+
    "\2\25\1\146\2\144\1\0\1\25\4\0\2\144\1\0"+
    "\27\144\1\147\1\245\2\0\1\147\1\246\1\247\6\245"+
    "\2\147\1\245\27\147\1\144\2\150\1\0\3\144\6\150"+
    "\2\144\1\150\30\144\3\0\3\144\6\0\2\144\1\0"+
    "\1\144\1\250\26\144\3\0\3\144\6\0\2\144\1\0"+
    "\4\144\1\251\23\144\3\0\3\144\6\0\2\144\1\0"+
    "\1\252\1\144\1\253\25\144\3\0\3\144\6\0\2\144"+
    "\1\0\4\144\1\254\23\144\3\0\3\144\6\0\2\144"+
    "\1\0\6\144\1\255\21\144\3\0\3\144\6\0\2\144"+
    "\1\0\10\144\1\256\17\144\3\0\3\144\6\0\2\144"+
    "\1\0\6\144\1\257\20\144\1\161\3\0\3\161\6\0"+
    "\2\161\1\0\27\161\1\0\1\162\47\0\3\163\3\0"+
    "\1\163\36\0\1\161\1\0\2\163\1\164\2\161\1\0"+
    "\1\163\4\0\2\161\1\0\27\161\2\166\2\0\1\166"+
    "\1\260\1\261\40\166\1\27\1\166\2\0\2\27\1\167"+
    "\6\166\2\27\1\166\27\27\2\176\2\0\1\176\1\262"+
    "\1\263\40\176\1\41\1\176\2\0\2\41\1\177\6\176"+
    "\2\41\1\176\27\41\2\201\2\0\1\201\1\264\1\265"+
    "\40\201\1\53\1\201\2\0\1\53\1\266\1\203\6\201"+
    "\2\53\1\201\27\53\2\206\2\0\1\206\1\63\1\267"+
    "\40\206\1\62\1\206\2\0\2\62\1\207\6\206\2\62"+
    "\1\206\27\62\1\57\3\0\3\57\6\0\2\57\1\0"+
    "\10\57\1\270\16\57\2\215\2\0\1\215\1\271\1\217"+
    "\40\215\40\0\1\272\37\0\1\273\47\0\1\274\41\0"+
    "\1\275\51\0\1\276\16\0\2\226\2\0\1\226\1\277"+
    "\1\300\40\226\1\120\1\226\2\0\1\120\1\301\1\230"+
    "\6\226\2\120\1\226\27\120\1\131\1\166\2\0\1\131"+
    "\1\302\1\234\6\166\2\131\1\166\27\131\1\0\1\236"+
    "\43\0\1\303\1\0\1\240\1\236\2\0\3\240\6\0"+
    "\2\240\1\0\27\240\1\304\1\241\2\0\3\304\6\0"+
    "\2\304\1\0\27\304\2\242\2\0\1\242\1\305\1\244"+
    "\40\242\2\245\2\0\1\245\1\306\1\307\40\245\1\147"+
    "\1\245\2\0\1\147\1\310\1\247\6\245\2\147\1\245"+
    "\27\147\1\144\3\0\3\144\6\0\2\144\1\0\2\144"+
    "\1\311\25\144\3\0\3\144\6\0\2\144\1\0\5\144"+
    "\1\312\22\144\3\0\3\144\6\0\2\144\1\0\7\144"+
    "\1\313\20\144\3\0\3\144\6\0\2\144\1\0\13\144"+
    "\1\314\14\144\3\0\3\144\6\0\2\144\1\0\11\144"+
    "\1\315\16\144\3\0\3\144\6\0\2\144\1\0\14\144"+
    "\1\316\13\144\3\0\3\144\6\0\2\144\1\0\5\144"+
    "\1\317\21\144\2\166\2\0\1\166\1\320\1\261\40\166"+
    "\2\176\2\0\1\176\1\321\1\263\40\176\2\201\2\0"+
    "\1\201\1\322\1\265\40\201\2\206\2\0\1\206\1\323"+
    "\1\267\40\206\26\0\1\324\44\0\1\325\55\0\1\326"+
    "\45\0\1\327\14\0\2\226\2\0\1\226\1\330\1\300"+
    "\40\226\1\304\3\0\3\304\6\0\2\304\1\0\27\304"+
    "\2\245\2\0\1\245\1\331\1\307\40\245\1\144\3\0"+
    "\3\144\6\0\2\144\1\0\2\144\1\332\25\144\3\0"+
    "\3\144\6\0\2\144\1\0\4\144\1\333\23\144\3\0"+
    "\3\144\6\0\2\144\1\0\4\144\1\334\23\144\3\0"+
    "\3\144\6\0\2\144\1\0\6\144\1\335\20\144\43\0"+
    "\1\336\34\0\1\337\42\0\1\340\60\0\1\341\34\0"+
    "\1\342\43\0\1\343\52\0\1\344\64\0\1\345\30\0"+
    "\1\346\60\0\1\347\34\0\1\350\64\0\1\351\33\0"+
    "\1\352\43\0\1\353\53\0\1\354\35\0\1\355\56\0"+
    "\1\356\40\0\1\357\61\0\1\360\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6357];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\22\0\5\1\1\11\11\1\1\11\11\1\1\11\6\1"+
    "\1\11\3\1\1\11\3\1\1\11\1\1\2\11\3\1"+
    "\1\11\2\1\1\11\13\1\1\11\1\1\1\11\2\1"+
    "\1\11\3\1\2\11\3\1\1\11\1\1\1\11\6\1"+
    "\1\11\14\1\1\11\1\0\1\1\5\11\1\1\1\0"+
    "\1\1\1\11\1\0\2\1\1\11\1\1\1\0\3\1"+
    "\2\11\1\1\1\0\1\11\6\0\1\11\1\0\3\1"+
    "\1\11\2\1\2\0\2\1\2\0\1\11\2\0\12\1"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\1\1\0"+
    "\2\1\3\0\1\11\1\0\1\11\1\0\2\1\1\11"+
    "\2\1\1\11\1\0\14\1\4\0\6\1\2\0\1\11"+
    "\6\0\1\11\5\0\1\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[240];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  JCmdLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  JCmdLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 302) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 65: 
          { yybegin(SET); yypushback(1); return CmdTokenType.ENVIRONMENT_VARIABLE_DEFINITION;
          }
        case 83: break;
        case 34: 
          { yybegin(IF_VARIABLE); return CmdTokenType.BAD_CHARACTER;
          }
        case 84: break;
        case 28: 
          { yybegin(IF); return CmdTokenType.WHITE_SPACE;
          }
        case 85: break;
        case 70: 
          { yybegin(NEXT_SYM); return CmdTokenType.STRING_LITERAL;
          }
        case 86: break;
        case 58: 
          { yybegin(YYINITIAL); return CmdTokenType.DO_KEYWORD;
          }
        case 87: break;
        case 22: 
          { yybegin(FOR_IN); return CmdTokenType.LEFT_PARENTHESIS;
          }
        case 88: break;
        case 41: 
          { yybegin(SET_VALUE); return CmdTokenType.EQUAL_OPERATOR;
          }
        case 89: break;
        case 49: 
          { yybegin(REM); yypushback(yylength());
          }
        case 90: break;
        case 61: 
          { yybegin(IF_EQUAL); return CmdTokenType.EQUAL_OPERATOR;
          }
        case 91: break;
        case 73: 
          { yybegin(FOR); return CmdTokenType.FOR_KEYWORD;
          }
        case 92: break;
        case 75: 
          { yybegin(CALL); return CmdTokenType.CALL_KEYWORD;
          }
        case 93: break;
        case 42: 
          { yybegin(SET_VALUE); return CmdTokenType.EXPRESSION;
          }
        case 94: break;
        case 37: 
          { yybegin(IF_EQUAL); return CmdTokenType.BAD_CHARACTER;
          }
        case 95: break;
        case 27: 
          { yybegin(IF); return CmdTokenType.EXPRESSION;
          }
        case 96: break;
        case 59: 
          { yybegin(GOTO); return CmdTokenType.EXPRESSION;
          }
        case 97: break;
        case 5: 
          { yybegin(YYINITIAL); return CmdTokenType.APPEND_OPERATOR;
          }
        case 98: break;
        case 53: 
          { yybegin(YYINITIAL); yypushback(yylength() - 1); return CmdTokenType.ECHO_OFF_MARKER;
          }
        case 99: break;
        case 55: 
          { yybegin(CALL); return CmdTokenType.LABEL_REFERENCE;
          }
        case 100: break;
        case 54: 
          { yybegin(CALL); return CmdTokenType.STRING_LITERAL;
          }
        case 101: break;
        case 8: 
          { yybegin(LABEL); return CmdTokenType.LABEL_MARKER;
          }
        case 102: break;
        case 68: 
          { yybegin(COMMAND); return CmdTokenType.STRING_LITERAL;
          }
        case 103: break;
        case 66: 
          { yybegin(SET_VALUE); yypushback(yylength() - 1); return CmdTokenType.EQUAL_OPERATOR;
          }
        case 104: break;
        case 82: 
          { yybegin(IF_DIGIT); return CmdTokenType.CMDEXTVERSION_KEYWORD;
          }
        case 105: break;
        case 33: 
          { yybegin(YYINITIAL); return CmdTokenType.DIGIT;
          }
        case 106: break;
        case 6: 
          { yybegin(YYINITIAL); return CmdTokenType.GET_OPERATOR;
          }
        case 107: break;
        case 67: 
          { yybegin(SET_VALUE); return CmdTokenType.STRING_LITERAL;
          }
        case 108: break;
        case 14: 
          { yybegin(CALL); return CmdTokenType.BAD_CHARACTER;
          }
        case 109: break;
        case 79: 
          { yybegin(IF_EXIST); return CmdTokenType.EXIST_KEYWORD;
          }
        case 110: break;
        case 12: 
          { yybegin(CALL); return CmdTokenType.EXPRESSION;
          }
        case 111: break;
        case 23: 
          { yybegin(FOR); return CmdTokenType.RIGHT_PARENTHESIS;
          }
        case 112: break;
        case 26: 
          { yybegin(GOTO); return CmdTokenType.BAD_CHARACTER;
          }
        case 113: break;
        case 76: 
          { yybegin(GOTO); return CmdTokenType.GOTO_KEYWORD;
          }
        case 114: break;
        case 32: 
          { yybegin(IF_DIGIT); return CmdTokenType.WHITE_SPACE;
          }
        case 115: break;
        case 25: 
          { yybegin(GOTO); return CmdTokenType.WHITE_SPACE;
          }
        case 116: break;
        case 24: 
          { yybegin(GOTO); return CmdTokenType.LABEL_REFERENCE;
          }
        case 117: break;
        case 38: 
          { yybegin(REM); return CmdTokenType.COMMENT;
          }
        case 118: break;
        case 47: 
          { yybegin(LABEL); return CmdTokenType.WHITE_SPACE;
          }
        case 119: break;
        case 11: 
          { yybegin(YYINITIAL); yypushback(yylength());
          }
        case 120: break;
        case 43: 
          { yybegin(SET_VALUE); return CmdTokenType.WHITE_SPACE;
          }
        case 121: break;
        case 19: 
          { yybegin(FOR); return CmdTokenType.WHITE_SPACE;
          }
        case 122: break;
        case 77: 
          { yybegin(ECHO); return CmdTokenType.ECHO_KEYWORD;
          }
        case 123: break;
        case 30: 
          { yybegin(IF_EXIST); return CmdTokenType.BAD_CHARACTER;
          }
        case 124: break;
        case 52: 
          { yybegin(YYINITIAL); return CmdTokenType.EXPRESSION;
          }
        case 125: break;
        case 57: 
          { yybegin(FOR_IN); return CmdTokenType.IN_KEYWORD;
          }
        case 126: break;
        case 16: 
          { yybegin(ECHO); return CmdTokenType.WHITE_SPACE;
          }
        case 127: break;
        case 15: 
          { yybegin(ECHO_SYM); return CmdTokenType.STRING_LITERAL;
          }
        case 128: break;
        case 50: 
          { yybegin(YYINITIAL); return CmdTokenType.OR_OPERATOR;
          }
        case 129: break;
        case 45: 
          { yybegin(COMMAND); return CmdTokenType.WHITE_SPACE;
          }
        case 130: break;
        case 21: 
          { yybegin(FOR_IN); return CmdTokenType.WHITE_SPACE;
          }
        case 131: break;
        case 74: 
          { yybegin(SET); return CmdTokenType.SET_KEYWORD;
          }
        case 132: break;
        case 62: 
          { yybegin(IF_EXIST); return CmdTokenType.STRING_LITERAL;
          }
        case 133: break;
        case 10: 
          { yybegin(NEXT_SYM); return CmdTokenType.EXPRESSION;
          }
        case 134: break;
        case 40: 
          { yybegin(SET); return CmdTokenType.WHITE_SPACE;
          }
        case 135: break;
        case 63: 
          { yybegin(IF_EXIST); return CmdTokenType.EXPRESSION;
          }
        case 136: break;
        case 31: 
          { yybegin(IF_DIGIT); return CmdTokenType.BAD_CHARACTER;
          }
        case 137: break;
        case 81: 
          { yybegin(IF_DIGIT); return CmdTokenType.ERRORLEVEL_KEYWORD;
          }
        case 138: break;
        case 72: 
          { yybegin(IF); return CmdTokenType.NOT_KEYWORD;
          }
        case 139: break;
        case 51: 
          { yybegin(YYINITIAL); return CmdTokenType.AND_OPERATOR;
          }
        case 140: break;
        case 20: 
          { yybegin(FOR_IN); return CmdTokenType.EXPRESSION;
          }
        case 141: break;
        case 80: 
          { yybegin(IF_VARIABLE); return CmdTokenType.DEFINED_KEYWORD;
          }
        case 142: break;
        case 71: 
          { yybegin(YYINITIAL); return CmdTokenType.OFF_KEYWORD;
          }
        case 143: break;
        case 39: 
          { yybegin(SET); return CmdTokenType.BAD_CHARACTER;
          }
        case 144: break;
        case 4: 
          { yybegin(YYINITIAL); return CmdTokenType.PIPE_OPERATOR;
          }
        case 145: break;
        case 60: 
          { yybegin(IF); return CmdTokenType.STRING_LITERAL;
          }
        case 146: break;
        case 3: 
          { yybegin(NEXT_SYM); yypushback(yylength());
          }
        case 147: break;
        case 36: 
          { yybegin(IF_EQUAL); return CmdTokenType.WHITE_SPACE;
          }
        case 148: break;
        case 78: 
          { yybegin(COMMAND); return CmdTokenType.ELSE_KEYWORD;
          }
        case 149: break;
        case 29: 
          { yybegin(IF_EXIST); return CmdTokenType.WHITE_SPACE;
          }
        case 150: break;
        case 2: 
          { yybegin(YYINITIAL); return CmdTokenType.WHITE_SPACE;
          }
        case 151: break;
        case 13: 
          { yybegin(CALL); return CmdTokenType.WHITE_SPACE;
          }
        case 152: break;
        case 17: 
          { yybegin(ECHO_SYM); return CmdTokenType.WHITE_SPACE;
          }
        case 153: break;
        case 35: 
          { yybegin(IF_VARIABLE); return CmdTokenType.WHITE_SPACE;
          }
        case 154: break;
        case 56: 
          { yybegin(YYINITIAL); return CmdTokenType.ON_KEYWORD;
          }
        case 155: break;
        case 1: 
          { yybegin(COMMAND); yypushback(yylength());
          }
        case 156: break;
        case 46: 
          { yybegin(REM);  return CmdTokenType.LABEL;
          }
        case 157: break;
        case 64: 
          { yybegin(YYINITIAL); return CmdTokenType.STRING_LITERAL;
          }
        case 158: break;
        case 69: 
          { yybegin(IF); return CmdTokenType.IF_KEYWORD;
          }
        case 159: break;
        case 7: 
          { yybegin(YYINITIAL); return CmdTokenType.PUT_OPERATOR;
          }
        case 160: break;
        case 18: 
          { yybegin(FOR); return CmdTokenType.EXPRESSION;
          }
        case 161: break;
        case 48: 
          { return CmdTokenType.BAD_CHARACTER;
          }
        case 162: break;
        case 44: 
          { yybegin(COMMAND); return CmdTokenType.EXPRESSION;
          }
        case 163: break;
        case 9: 
          { yybegin(NEXT_SYM); return CmdTokenType.WHITE_SPACE;
          }
        case 164: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
